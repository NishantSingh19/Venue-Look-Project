
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Personalized resort recommendations based on occasion, preferences, and budget.
 *
 * - generateResortRecommendations - A function that generates personalized resort recommendations.
 * - GenerateResortRecommendationsInput - The input type for the generateResortRecommendations function.
 * - GenerateResortRecommendationsOutput - The return type for the generateResortRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateResortRecommendationsInputSchema = z.object({
  occasion: z.string().describe('The occasion for the stay (e.g., honeymoon, family vacation).'),
  preferences: z.string().describe('User preferences for the resort (e.g., beachfront, spa, activities).'),
  budget: z.string().describe('The userâ€™s budget for the stay (e.g., luxury, mid-range, budget-friendly).'),
});
export type GenerateResortRecommendationsInput = z.infer<typeof GenerateResortRecommendationsInputSchema>;

const AIRecommendationSchema = z.object({
  resortName: z.string().describe('The name of the recommended resort.'),
  description: z.string().describe('A detailed description of the resort and why it is recommended based on the input criteria.'),
  location: z.string().describe('The city and country of the resort (e.g., "Cancun, Mexico").'),
  priceCategory: z.enum(["Luxury", "Mid-range", "Budget", "Budget-friendly"]).describe('The estimated price category of the resort.'),
  estimatedRating: z.number().min(1).max(5).describe('An estimated rating for the resort on a scale of 1 to 5 (e.g., 4.7).'),
  keyAmenities: z.array(z.string()).describe('A list of 3-5 key amenities the resort offers that match the user preferences (e.g., ["Infinity Pool", "Spa Access", "Kids Club"]).'),
  suitableForSuggestions: z.array(z.string()).describe('A list of 2-3 types of occasions or traveler types this resort is suitable for (e.g., ["Honeymoon", "Family Fun", "Relaxation"]).'),
  imagePromptHint: z.string().describe('A short, descriptive hint for generating an image of the resort (e.g., "serene beachfront villa at sunrise", "modern ski lodge interior", "bustling city hotel rooftop pool"). This should be 2-5 words.'),
});

const GenerateResortRecommendationsOutputSchema = z.object({
  recommendations: z.array(AIRecommendationSchema).describe('A list of exactly 4 personalized resort recommendations with detailed information.'),
});
export type GenerateResortRecommendationsOutput = z.infer<typeof GenerateResortRecommendationsOutputSchema>;


export async function generateResortRecommendations(input: GenerateResortRecommendationsInput): Promise<GenerateResortRecommendationsOutput> {
  return generateResortRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateResortRecommendationsPrompt',
  input: {schema: GenerateResortRecommendationsInputSchema},
  output: {schema: GenerateResortRecommendationsOutputSchema},
  prompt: `You are an expert travel agent specializing in resort recommendations.

  Based on the user's occasion, preferences, and budget, provide a list of exactly 4 personalized resort recommendations.

  User Input:
  Occasion: {{{occasion}}}
  Preferences: {{{preferences}}}
  Budget: {{{budget}}}

  For each recommendation, provide the following details in JSON format:
  - resortName: The name of the resort.
  - description: A detailed description of the resort and why it's a good fit for the user's input.
  - location: The city and country of the resort (e.g., "Paris, France").
  - priceCategory: The price category. Choose from "Luxury", "Mid-range", "Budget", or "Budget-friendly".
  - estimatedRating: An estimated rating on a scale of 1 to 5 (e.g., 4.5).
  - keyAmenities: An array of 3-5 key amenities relevant to the user's preferences.
  - suitableForSuggestions: An array of 2-3 suitable occasions or traveler types.
  - imagePromptHint: A short (2-5 words) descriptive hint for generating an image of the resort (e.g., "tropical beach sunset", "cozy mountain cabin").

  Ensure your output is a valid JSON object with a "recommendations" array, where each element is an object matching the structure described above and the array contains exactly 4 recommendations.
  `,
});

const generateResortRecommendationsFlow = ai.defineFlow(
  {
    name: 'generateResortRecommendationsFlow',
    inputSchema: GenerateResortRecommendationsInputSchema,
    outputSchema: GenerateResortRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output?.recommendations) {
      console.warn("AI did not return recommendations or output was malformed.");
      return { recommendations: [] };
    }
    // While the prompt requests exactly 4, we can add a safeguard here if needed.
    // For now, relying on the prompt instruction.
    // if (output.recommendations.length > 4) {
    //   output.recommendations = output.recommendations.slice(0, 4);
    // }
    return output;
  }
);

